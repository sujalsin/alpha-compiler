m4_include(library.alpha)

type rec: [integer: x; integer: y]
type nested_rec: [rec: r; integer: x]
type T1: integer -> integer
type T2: rec -> integer
type string: 1 -> character
type arr: 3 -> integer
type string2int: string -> integer

function foo : T1
function bar1 : T2
function bar2 : T2
function entry : string2int

foo(x) := {
	return x * x;
}

bar1(a) := {
	return a.x * a.y;
}

bar2 as (r,s) := {
	[	integer: i; 
		Boolean: bif; 
		Boolean: belse; 
		Boolean: bwhile ]

	i := 0;
	bif := true;
	belse := ! bif;
	bwhile := bif;

	while (bwhile) {
		[	integer: max;
			integer: cap ]
		max := 5;
		cap := 10;
		if (i < max) then {
			i := i + 1;
		} else {
			i := cap;
			bwhile := false;
		}
	}
	return r * s;
}

entry(arg) := {
	[ integer: result ; rec: w ; arr: array3]

 	result := foo(5);

 	w := reserve w; 
	(* see types.alpha â€“ reserve returns a value of type address,
 	which can be assigned to array and record variables
 	*)
	
	w.x := 5;
	w.y := 7;
 
	result := bar1(w); (* pass w (a rec type value) to bar1 *)
	result := bar2(5,7); (* implicitly build a rec type value, assign 5 and 7 to fields x and y, but call them r and s *)
	result := bar1(5,7); (* fail, too many args *)
	result := bar2(w); (* fail too few args, expected integer not rec *)
	result := bar1(w,5); (* too many args, args incorrect type *)
	result := bar2(w,5,7); (* too many args, args incorrect type *)
	result := bar1(4); (* args incorrect type *)

	return 0;
}
