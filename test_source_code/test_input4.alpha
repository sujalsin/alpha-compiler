#include "library.alpha"

type integer2address: integer -> address
type address2integer: address -> integer
external function reserve: integer2address
external function release: address2integer

type rec: [integer: x; integer: y]
type T1: integer -> integer
type T2: rec -> integer
type string2int: string -> integer

function foo : T1
function bar1 : T2
function bar2 : T2
function entry : string2int

foo(x) := {
 return x * x;
}

bar1(a) := {
 return a.x * a.y;
}

bar2 as (r,s) := {
 return r * s;
}

entry(arg) := {
	[ integer: result ; rec: w]
 	result := foo(5);
 	w := reserve w; (* see types.alpha â€“ reserve returns a value of type address,
 	which can be assigned to array and record variables
 	*)

 w.x := 5;
 w.y := 7;
 
result := bar1(w); (* pass w (a rec type value) to bar1 *)
 result := bar2(5,7); (* implicitly build a rec type value, assign 5 and 7 to fields x and y, but call them r and s *)

 return 0;
}